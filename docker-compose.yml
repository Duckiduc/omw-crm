services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: omw-crm-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: omw_crm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d omw_crm"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: omw-crm-backend
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: omw_crm
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-please
      JWT_EXPIRES_IN: 7d
      FRONTEND_URL: http://localhost:3000
      # Comma-separated list of allowed origins for CORS. Example:
      # CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
      CORS_ORIGINS: "http://localhost:3000,http://localhost:5173"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://localhost:3002/api
    container_name: omw-crm-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: omw-crm-network